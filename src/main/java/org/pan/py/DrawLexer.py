# Generated from E:/maven-project/bianyi/src/main/java/org/pan/antlr/Draw.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,230,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,1,4,1,71,8,1,11,1,12,1,72,1,1,1,1,5,1,77,8,1,10,1,12,
        1,80,9,1,3,1,82,8,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,90,8,1,1,2,1,2,1,
        2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,
        13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,20,4,20,166,8,20,11,20,12,20,167,1,20,1,20,1,21,1,21,1,21,1,
        21,5,21,176,8,21,10,21,12,21,179,9,21,1,21,1,21,1,21,1,21,1,22,1,
        22,1,22,1,22,5,22,189,8,22,10,22,12,22,192,9,22,1,22,1,22,1,22,1,
        22,1,23,1,23,1,23,1,23,5,23,202,8,23,10,23,12,23,205,9,23,1,23,1,
        23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
        28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,3,177,190,203,0,
        33,1,0,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,
        27,13,29,14,31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,
        49,24,51,25,53,26,55,27,57,28,59,29,61,30,63,31,65,32,1,0,20,1,0,
        48,57,2,0,80,80,112,112,2,0,73,73,105,105,2,0,69,69,101,101,2,0,
        83,83,115,115,2,0,78,78,110,110,2,0,67,67,99,99,2,0,79,79,111,111,
        2,0,84,84,116,116,2,0,65,65,97,97,2,0,76,76,108,108,2,0,88,88,120,
        120,2,0,81,81,113,113,2,0,82,82,114,114,2,0,71,71,103,103,2,0,68,
        68,100,100,2,0,87,87,119,119,2,0,70,70,102,102,2,0,77,77,109,109,
        3,0,9,10,13,13,32,32,237,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,89,
        1,0,0,0,5,91,1,0,0,0,7,94,1,0,0,0,9,96,1,0,0,0,11,100,1,0,0,0,13,
        104,1,0,0,0,15,108,1,0,0,0,17,111,1,0,0,0,19,115,1,0,0,0,21,120,
        1,0,0,0,23,127,1,0,0,0,25,133,1,0,0,0,27,135,1,0,0,0,29,140,1,0,
        0,0,31,145,1,0,0,0,33,148,1,0,0,0,35,153,1,0,0,0,37,157,1,0,0,0,
        39,161,1,0,0,0,41,165,1,0,0,0,43,171,1,0,0,0,45,184,1,0,0,0,47,197,
        1,0,0,0,49,211,1,0,0,0,51,213,1,0,0,0,53,215,1,0,0,0,55,217,1,0,
        0,0,57,219,1,0,0,0,59,222,1,0,0,0,61,224,1,0,0,0,63,226,1,0,0,0,
        65,228,1,0,0,0,67,68,7,0,0,0,68,2,1,0,0,0,69,71,3,1,0,0,70,69,1,
        0,0,0,71,72,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,81,1,0,0,0,74,
        78,5,46,0,0,75,77,3,1,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,
        0,0,78,79,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,81,74,1,0,0,0,81,82,
        1,0,0,0,82,90,1,0,0,0,83,84,3,5,2,0,84,85,6,1,0,0,85,90,1,0,0,0,
        86,87,3,7,3,0,87,88,6,1,1,0,88,90,1,0,0,0,89,70,1,0,0,0,89,83,1,
        0,0,0,89,86,1,0,0,0,90,4,1,0,0,0,91,92,7,1,0,0,92,93,7,2,0,0,93,
        6,1,0,0,0,94,95,7,3,0,0,95,8,1,0,0,0,96,97,7,4,0,0,97,98,7,2,0,0,
        98,99,7,5,0,0,99,10,1,0,0,0,100,101,7,6,0,0,101,102,7,7,0,0,102,
        103,7,4,0,0,103,12,1,0,0,0,104,105,7,8,0,0,105,106,7,9,0,0,106,107,
        7,5,0,0,107,14,1,0,0,0,108,109,7,10,0,0,109,110,7,5,0,0,110,16,1,
        0,0,0,111,112,7,3,0,0,112,113,7,11,0,0,113,114,7,1,0,0,114,18,1,
        0,0,0,115,116,7,4,0,0,116,117,7,12,0,0,117,118,7,13,0,0,118,119,
        7,8,0,0,119,20,1,0,0,0,120,121,7,7,0,0,121,122,7,13,0,0,122,123,
        7,2,0,0,123,124,7,14,0,0,124,125,7,2,0,0,125,126,7,5,0,0,126,22,
        1,0,0,0,127,128,7,4,0,0,128,129,7,6,0,0,129,130,7,9,0,0,130,131,
        7,10,0,0,131,132,7,3,0,0,132,24,1,0,0,0,133,134,7,8,0,0,134,26,1,
        0,0,0,135,136,7,15,0,0,136,137,7,13,0,0,137,138,7,9,0,0,138,139,
        7,16,0,0,139,28,1,0,0,0,140,141,7,4,0,0,141,142,7,8,0,0,142,143,
        7,3,0,0,143,144,7,1,0,0,144,30,1,0,0,0,145,146,7,8,0,0,146,147,7,
        7,0,0,147,32,1,0,0,0,148,149,7,17,0,0,149,150,7,13,0,0,150,151,7,
        7,0,0,151,152,7,18,0,0,152,34,1,0,0,0,153,154,7,17,0,0,154,155,7,
        7,0,0,155,156,7,13,0,0,156,36,1,0,0,0,157,158,7,13,0,0,158,159,7,
        7,0,0,159,160,7,8,0,0,160,38,1,0,0,0,161,162,7,2,0,0,162,163,7,4,
        0,0,163,40,1,0,0,0,164,166,7,19,0,0,165,164,1,0,0,0,166,167,1,0,
        0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,6,20,
        2,0,170,42,1,0,0,0,171,172,5,47,0,0,172,173,5,47,0,0,173,177,1,0,
        0,0,174,176,9,0,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,178,1,0,
        0,0,177,175,1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,0,180,181,5,10,
        0,0,181,182,1,0,0,0,182,183,6,21,2,0,183,44,1,0,0,0,184,185,5,45,
        0,0,185,186,5,45,0,0,186,190,1,0,0,0,187,189,9,0,0,0,188,187,1,0,
        0,0,189,192,1,0,0,0,190,191,1,0,0,0,190,188,1,0,0,0,191,193,1,0,
        0,0,192,190,1,0,0,0,193,194,5,10,0,0,194,195,1,0,0,0,195,196,6,22,
        2,0,196,46,1,0,0,0,197,198,5,47,0,0,198,199,5,42,0,0,199,203,1,0,
        0,0,200,202,9,0,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,204,1,0,
        0,0,203,201,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,5,42,
        0,0,207,208,5,47,0,0,208,209,1,0,0,0,209,210,6,23,2,0,210,48,1,0,
        0,0,211,212,5,59,0,0,212,50,1,0,0,0,213,214,5,40,0,0,214,52,1,0,
        0,0,215,216,5,44,0,0,216,54,1,0,0,0,217,218,5,41,0,0,218,56,1,0,
        0,0,219,220,5,42,0,0,220,221,5,42,0,0,221,58,1,0,0,0,222,223,5,43,
        0,0,223,60,1,0,0,0,224,225,5,45,0,0,225,62,1,0,0,0,226,227,5,42,
        0,0,227,64,1,0,0,0,228,229,5,47,0,0,229,66,1,0,0,0,9,0,72,78,81,
        89,167,177,190,203,3,1,1,0,1,1,1,6,0,0
    ]

class DrawLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CONST_ID = 1
    PI = 2
    E = 3
    SIN = 4
    COS = 5
    TAN = 6
    LN = 7
    EXP = 8
    SQRT = 9
    ORIGIN = 10
    SCALE = 11
    T = 12
    DRAW = 13
    STEP = 14
    TO = 15
    FROM = 16
    FOR = 17
    ROT = 18
    IS = 19
    WS = 20
    SL_COMMENT1 = 21
    SL_COMMENT2 = 22
    ML_COMMENT1 = 23
    SEMI = 24
    LPAREN = 25
    COMMA = 26
    RPAREN = 27
    T__2 = 28
    ADD = 29
    SUB = 30
    MUL = 31
    DIV = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "','", "')'", "'**'", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "CONST_ID", "PI", "E", "SIN", "COS", "TAN", "LN", "EXP", "SQRT", 
            "ORIGIN", "SCALE", "T", "DRAW", "STEP", "TO", "FROM", "FOR", 
            "ROT", "IS", "WS", "SL_COMMENT1", "SL_COMMENT2", "ML_COMMENT1", 
            "SEMI", "LPAREN", "COMMA", "RPAREN", "ADD", "SUB", "MUL", "DIV" ]

    ruleNames = [ "DIGIT", "CONST_ID", "PI", "E", "SIN", "COS", "TAN", "LN", 
                  "EXP", "SQRT", "ORIGIN", "SCALE", "T", "DRAW", "STEP", 
                  "TO", "FROM", "FOR", "ROT", "IS", "WS", "SL_COMMENT1", 
                  "SL_COMMENT2", "ML_COMMENT1", "SEMI", "LPAREN", "COMMA", 
                  "RPAREN", "T__2", "ADD", "SUB", "MUL", "DIV" ]

    grammarFileName = "Draw.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


        double piValue = 3.14159;
        double eValue = 2.71828;


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[1] = self.CONST_ID_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def CONST_ID_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             setText(Double.toString(piValue)); 
     

        if actionIndex == 1:
             setText(Double.toString(eValue)); 
     


